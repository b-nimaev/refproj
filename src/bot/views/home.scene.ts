import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";
import {
  InlineKeyboardButton,
  InlineKeyboardMarkup,
  ReplyKeyboardMarkup,
} from "telegraf/typings/core/types/typegram";
import { getWalletInfo, getWallets } from "../../ton-connect/wallets";
import TonConnect from "@tonconnect/sdk";
import { TonConnectStorage } from "../../ton-connect/storage";
import { getConnector } from "../../ton-connect/connector";
import QRCode from "qrcode";

const baseKeyboard = {
  keyboard: [
    ["–û –∫–ª—É–±–µ", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"],
    ["–î–æ–Ω–∞—Ç—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
  ],
  resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  one_time_keyboard: true, // –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
};

const channelSubscribe = {
  keyboard: [["–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]],
  resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  one_time_keyboard: true, // –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
};

const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene(
  "home",
  handler,
  async (ctx: rlhubContext) => await registratonHandler(ctx),
  async (ctx: rlhubContext) => await menuHandler(ctx),
  async (ctx: rlhubContext) => await walletHandler(ctx)
);

export async function greeting(ctx: rlhubContext, reply?: boolean) {
  const refId = ctx.scene.session.ref_id;
  const refUser = await User.findOne({ id: refId });

  if (!refUser) {
    return ctx.reply(`–°—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!`);
  }

  let message = `–í—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`;
  if (typeof refUser.first_name === "string") {
    message += " " + refUser.first_name;
  }
  if (typeof refUser.last_name === "string") {
    message += " " + refUser.last_name;
  }
  if (typeof refUser.username === "string") {
    message += " ‚Äî " + refUser.username;
  }
  message += ". –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?";

  const extra: any = {
    parse_mode: "HTML",
    reply_markup: {
      keyboard: [["–î–∞", "–ù–µ—Ç"]],
      resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      one_time_keyboard: true, // –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    },
  };

  ctx.wizard.selectStep(1)
  
  try {
    ctx.reply(message, extra);

  } catch (err) {
    console.log(err);
  }
}

home.start(async (ctx: rlhubContext) => {
  let ref_user: number = 0;

  // await new User({
  //   first_name: ctx.from.first_name,
  //   last_name: ctx.from.last_name,
  //   username: ctx.from.username,
  //   id: ctx.from.id
  // }).save()

  if (ctx.startPayload) {
    ref_user = parseFloat(ctx.startPayload);
    console.log(ref_user);
    ctx.scene.session.ref_id = ref_user;
  }

  try {
    const document: IUser | null = await User.findOne({ id: ctx.from?.id });
    await greeting(ctx);
    // if (!document) {
    //   await greeting(ctx);
    // } else {
    //   const photoUrl =
    //     "https://letsenhance.io/static/8f5e523ee6b2479e26ecc91b9c25261e/1015f/MainAfter.jpg";
    //   const caption =
    //     "–ó–¥–µ—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.";
    //   await ctx.replyWithPhoto(photoUrl, { caption: caption });
    //   await ctx.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", {
    //     parse_mode: "Markdown", // –ò–ª–∏ 'HTML', –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
    //     reply_markup: baseKeyboard,
    //   });
    // }
  } catch (err) {
    console.log(err);
  }
});

async function delay(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

home.enter(async (ctx) => {
  return await greeting(ctx);
});

async function registratonHandler(ctx: rlhubContext) {
  if (ctx.from) {
    try {
      console.log("123");
      if (ctx.updateType === "message") {
        if (ctx.update.message.text) {
          let text: string = ctx.update.message.text;
          const message = `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. https://t.me/bur_live`;
          ctx.reply(message, { reply_markup: channelSubscribe });

          if (ctx.update.message.text === "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è") {
            const status = await checkSubscription(ctx);
            if (status) {
              await User.findOneAndUpdate(
                { id: ctx.from.id },
                {
                  $set: {
                    sponsor: ctx.scene.session.ref_id,
                  },
                }
              );
              const subMessage = `–ü–æ–∑—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–ø–∏—Å–∞–Ω—ã –∫–∞–Ω–∞–ª!`;
              ctx.reply(subMessage, { reply_markup: baseKeyboard });
              ctx.wizard.next();
            }
          }
        } else {
          await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ");
        }
      }
    } catch (err) {
      ctx.wizard.selectStep(0);
      await greeting(ctx);
    }
  }
}
async function menuHandler(ctx: rlhubContext) {
  if (ctx.from) {
    const user: IUser = await User.findOne({ id: ctx.from.id });
    let sponsor = null;
    if (!user) {
      return false;
    }

    if (user.sponsor) {
      sponsor = await User.findOne({ id: user.sponsor });
    }

    try {
      if (ctx.updateType === "message") {
        if (ctx.update.message.text) {
          let text: "–û –∫–ª—É–±–µ" | "–î–æ–Ω–∞—Ç—ã" | "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞" | "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" =
            ctx.update.message.text;

          // –û –∫–ª—É–±–µ

          if (text === "–û –∫–ª—É–±–µ") {
            const photoUrl =
              "https://letsenhance.io/static/8f5e523ee6b2479e26ecc91b9c25261e/1015f/MainAfter.jpg";
            const caption =
              "–ó–¥–µ—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.";
            ctx.replyWithPhoto(photoUrl, {
              caption: caption,
              parse_mode: "Markdown", // –ò–ª–∏ 'HTML', –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
              reply_markup: baseKeyboard,
            });
          }

          // –î–æ–Ω–∞—Ç—ã

          if (text === "–î–æ–Ω–∞—Ç—ã") {
            let message: string = `–í–∞—à —Å–ø–æ–Ω—Å–æ—Ä: <b>${sponsor.username}</b> \n–ú–æ–π —Å—Ç–∞—Ç—É—Å: <b>Free</b>\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: <b>5132</b>\n–ü–æ–ª—É–Ω–æ –¥–æ–Ω–∞—Ç–æ–≤: <b>123 Ton</b>`;
            const extra: ExtraEditMessageText = {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üü• –°—Ç–∞—Ä—Ç–æ–≤—ã–π - 1000 üü•",
                      callback_data: "start-1000",
                    },
                  ],
                  [
                    {
                      text: "üü• –ë—Ä–æ–Ω–∑–∞ - 1000 üü•",
                      callback_data: "start-3000",
                    },
                  ],
                  [
                    {
                      text: "üü• –°–µ—Ä–µ–±—Ä–æ - 9000 üü•",
                      callback_data: "start-9000",
                    },
                  ],
                  [
                    {
                      text: "üü• –ó–æ–ª–æ—Ç–æ - 30000 üü•",
                      callback_data: "start-30000",
                    },
                  ],
                  [
                    {
                      text: "üü• –ü–ª–∞—Ç–∏–Ω–∞ - 90000 üü•",
                      callback_data: "start-90000",
                    },
                  ],
                ],
              },
            };

            ctx.reply(message, extra);
          }

          if (text === "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞") {
            if (user.wallet) {
              const reflink = "https://t.me/xpremium1bot?start=" + ctx.from.id;
              const message = `–í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–∞—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${reflink}`;
              await ctx.reply(message, { reply_markup: baseKeyboard });
            } else {
              const message =
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ –º–∏–Ω–∏–º—É–º –Ω–∞ 1000 –†—É–±, –∏ —É–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ Ton";
              await ctx.reply(message, { reply_markup: baseKeyboard });
            }
          }

          if (text === "–ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
            if (user.wallet) {
              const message = `–í–æ—Ç –≤–∞—à –∫–æ—à–µ–ª–µ–∫ Ton: ${user.wallet} \n\n/change ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å`;
              await ctx.reply(message, { reply_markup: baseKeyboard });
            } else {
              const message =
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω—É /add";
              await ctx.reply(message, { reply_markup: baseKeyboard });
            }

            ctx.wizard.next();
          }
        } else {
          await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ");
        }
      } else if (ctx.updateType === "callback_query") {
        ctx.answerCbQuery();
        ctx.reply(
          "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 2.87 TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç, <code>UQCbaw4zpUguHg71bZJfEWzqsnxNiHn226a9-ne-9sXSl4g7</code>"
        );
      }
    } catch (err) {
      ctx.wizard.selectStep(0);
      await greeting(ctx);
    }
  }
}

async function walletHandler(ctx: rlhubContext) {
  try {
    const user: IUser = await User.findOne({ id: ctx.from.id });
    if (ctx.updateType === "message") {
      if (ctx.update.message.text) {
        let text: string = ctx.update.message.text;

        if (
          ctx.update.message.text === "/add" ||
          ctx.update.message.text === "/add"
        ) {
          return await connectWallet(ctx);
        } else if (
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ||
          "–û –∫–ª—É–±–µ" ||
          "–î–æ–Ω–∞—Ç—ã" ||
          "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
        ) {
          await menuHandler(ctx);
          return ctx.wizard.selectStep(2);
        } else {
          await ctx.reply(
            `–í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${ctx.update.message.text} –≤–∞—à–∏–º –∫–æ—à–µ–ª—å–∫–æ–º?`,
            {
              parse_mode: "HTML",
              reply_markup: {
                keyboard: [["–î–∞", "–ù–µ—Ç"]],
                resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                one_time_keyboard: true, // –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              },
            }
          );
        }
      } else {
        await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ");
      }
    }
  } catch (error) {
    ctx.wizard.selectStep(0);
    await greeting(ctx);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkSubscription(ctx) {
  const channelId = -1001658597277; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
  const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞

  try {
    const memberStatus = await ctx.telegram.getChatMember(channelId, userId);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (
      memberStatus.status === "member" ||
      memberStatus.status === "administrator" ||
      memberStatus.status === "creator"
    ) {
      return true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    } else {
      return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

async function connectWallet(ctx: rlhubContext) {
  try {
    const chatId = ctx.from.id;
    const wallets = await getWallets();

    const connector = getConnector(chatId);

    connector.onStatusChange(async (wallet) => {
      if (wallet) {
        const walletName =
          (await getWalletInfo(wallet.device.appName))?.name ||
          wallet.device.appName;
        ctx.reply(`${walletName} wallet connected!`);
      }
    });

    const link = connector.connect(wallets);
    const image = await QRCode.toBuffer(link);

    const buffer = Buffer.from(image);
    await ctx.replyWithPhoto(
      { source: buffer },
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–í—ã–±—Ä–∞—Ç—å –∫–æ—à–µ–ª–µ–∫",
                callback_data: JSON.stringify({ method: "chose_wallet" }),
              },
            ],
          ],
        },
      }
    );
    ctx.wizard.selectStep(2);
  } catch (error) {
    console.log(error);
  }
}
export default home;
